@page "/auth/login"

@inject AuthenticationStateProvider AuthStateProvider
@inject IUserService UserService
@inject IJSRuntime Js
@inject NavigationManager NavManager

<PageTitle>Login</PageTitle>

<div class="text-center">
    <h1>Login</h1>
    <br/>
    
    <EditForm Model="_login">
        <div>
            <label for="Login">Email</label>
            <InputText class="form-control" id="Login" @bind-Value="_login.Email"></InputText>
        </div>
        <div>
            <label for="Password">Password</label>
            <InputText class="form-control" id="Password" @bind-Value="_login.Password"></InputText>
        </div>
    </EditForm>
    <br/>
    <br/>
    
    <button class="btn btn-info auto-width"><a href="/"><i class="bi bi-arrow-bar-left"></i></a></button>
    <button class="btn btn-success auto-width" @onclick="LoginAsync"><i class="bi bi-check-square"></i></button>
    <br/>
    <br/>
    
    <p>Don`t have an account? <a href="/auth/sign-up">Sign up here</a></p>
</div>

@code
{
    readonly LoginDto _login = new();
    UserDto _user;

    private async void LoginAsync()
    {
        try
        {
            _user = await UserService.GetByLoginAsync(_login);
        }
        catch (Exception e)
        {
            await Js.InvokeVoidAsync("alert", e.Message);
            return;
        }

        var customStateProvider = (MyAuthenticationStateProvider)AuthStateProvider;
        await customStateProvider.UpdateAuthenticationStateAsync(new UserSession
        {
            Id = _user.Id,
            UserName = _user.UserName,
            Email = _user.Email,
            PhoneNumber = _user.PhoneNumber,
            Role = await UserService.GetRoleNameByIdAsync(_user.Id)
        });
        
        NavManager.NavigateTo($"/user/account", true);
    }
}
